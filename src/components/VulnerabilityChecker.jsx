import React, { useState } from 'react';
import { Shield, AlertTriangle, CheckCircle, XCircle, Info, BarChart3 } from 'lucide-react';
import { checkVulnerabilities } from '../services/securityService.js';

const VulnerabilityChecker = ({ sourceCode, vulnerabilities, setVulnerabilities, isLoading, setIsLoading }) => {
  const [scanLevel, setScanLevel] = useState('comprehensive');

  const handleScanVulnerabilities = async () => {
    if (!sourceCode.trim()) {
      alert('Please enter some source code first!');
      return;
    }

    setIsLoading(true);
    try {
      const results = await checkVulnerabilities(sourceCode, scanLevel);
      setVulnerabilities(results);
    } catch (error) {
      console.error('Error scanning vulnerabilities:', error);
      alert('Failed to scan for vulnerabilities. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const getSeverityColor = (severity) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'text-red-400 bg-red-500/10 border-red-500/20';
      case 'high':
        return 'text-red-400 bg-red-500/10 border-red-500/20';
      case 'medium':
        return 'text-yellow-400 bg-yellow-500/10 border-yellow-500/20';
      case 'low':
        return 'text-blue-400 bg-blue-500/10 border-blue-500/20';
      default:
        return 'text-gray-400 bg-gray-500/10 border-gray-500/20';
    }
  };

  const getSeverityIcon = (severity) => {
    switch (severity.toLowerCase()) {
      case 'critical':
      case 'high':
        return <XCircle size={20} className="text-red-400" />;
      case 'medium':
        return <AlertTriangle size={20} className="text-yellow-400" />;
      case 'low':
        return <Info size={20} className="text-blue-400" />;
      default:
        return <Info size={20} className="text-gray-400" />;
    }
  };

  const getSecurityScore = () => {
    if (!vulnerabilities.length) return 100;
    
    const criticalCount = vulnerabilities.filter(v => v.severity.toLowerCase() === 'critical').length;
    const highCount = vulnerabilities.filter(v => v.severity.toLowerCase() === 'high').length;
    const mediumCount = vulnerabilities.filter(v => v.severity.toLowerCase() === 'medium').length;
    const lowCount = vulnerabilities.filter(v => v.severity.toLowerCase() === 'low').length;
    
    const score = 100 - (criticalCount * 25 + highCount * 15 + mediumCount * 8 + lowCount * 3);
    return Math.max(0, score);
  };

  return (
    <div className="space-y-4 sm:space-y-6">
      <div className="card hover-card">
        <div className="flex flex-col sm:flex-row sm:items-center justify-between mb-4 sm:mb-6 gap-4">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-red-500/10 rounded-lg">
              <Shield className="text-red-400" size={20} />
            </div>
            <h2 className="text-lg sm:text-xl font-semibold text-gray-100">Security Vulnerability Scanner</h2>
          </div>
          <div className="flex items-center space-x-3">
            <select
              value={scanLevel}
              onChange={(e) => setScanLevel(e.target.value)}
              className="input-field text-sm w-full sm:w-auto"
            >
              <option value="basic">Basic Scan</option>
              <option value="standard">Standard Scan</option>
              <option value="comprehensive">Comprehensive Scan</option>
              <option value="deep">Deep Scan</option>
            </select>
          </div>
        </div>

        <div className="flex items-center space-x-3 mb-4 sm:mb-6">
          <button
            onClick={handleScanVulnerabilities}
            disabled={!sourceCode.trim() || isLoading}
            className="btn-warning btn-hover-effect flex items-center space-x-2 text-sm"
          >
            <Shield size={16} />
            <span>{isLoading ? 'Scanning...' : 'Scan for Vulnerabilities'}</span>
          </button>
        </div>

        {!sourceCode.trim() && (
          <div className="bg-yellow-500/10 border border-yellow-500/20 rounded-xl p-6">
            <div className="flex items-center space-x-3">
              <AlertTriangle size={24} className="text-yellow-400" />
              <p className="text-yellow-300">
                Please add some source code in the Code Editor tab first, then come back to scan for vulnerabilities.
              </p>
            </div>
          </div>
        )}

        {isLoading && (
          <div className="flex items-center justify-center py-12">
            <div className="flex items-center space-x-4">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-red-500"></div>
              <span className="text-gray-300 text-lg">Scanning for security vulnerabilities<span className="loading-dots"></span></span>
            </div>
          </div>
        )}
      </div>

      {vulnerabilities.length > 0 && !isLoading && (
        <>
          <div className="card hover-card">
            <div className="flex items-center space-x-3 mb-6">
              <div className="p-2 bg-blue-500/10 rounded-lg">
                <BarChart3 className="text-blue-400" size={20} />
              </div>
              <h3 className="text-lg font-semibold text-gray-100">Security Overview</h3>
            </div>
            <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 lg:gap-6">
              <div className="text-center p-4 sm:p-6 bg-gray-800/50 rounded-xl border border-gray-600/50">
                <div className="text-3xl sm:text-4xl font-bold text-gradient-primary">{getSecurityScore()}</div>
                <div className="text-gray-400 text-xs sm:text-sm mt-2">Security Score</div>
              </div>
              <div className="text-center p-4 sm:p-6 bg-red-500/10 rounded-xl border border-red-500/20">
                <div className="text-3xl sm:text-4xl font-bold text-red-400">
                  {vulnerabilities.filter(v => ['critical', 'high'].includes(v.severity.toLowerCase())).length}
                </div>
                <div className="text-gray-400 text-xs sm:text-sm mt-2">High/Critical Issues</div>
              </div>
              <div className="text-center p-4 sm:p-6 bg-yellow-500/10 rounded-xl border border-yellow-500/20">
                <div className="text-3xl sm:text-4xl font-bold text-yellow-400">
                  {vulnerabilities.filter(v => v.severity.toLowerCase() === 'medium').length}
                </div>
                <div className="text-gray-400 text-xs sm:text-sm mt-2">Medium Issues</div>
              </div>
              <div className="text-center p-4 sm:p-6 bg-blue-500/10 rounded-xl border border-blue-500/20">
                <div className="text-3xl sm:text-4xl font-bold text-blue-400">
                  {vulnerabilities.filter(v => v.severity.toLowerCase() === 'low').length}
                </div>
                <div className="text-gray-400 text-xs sm:text-sm mt-2">Low Issues</div>
              </div>
            </div>
          </div>

          <div className="card hover-card">
            <h3 className="text-lg font-semibold text-gray-100 mb-6">Vulnerability Details</h3>
            <div className="space-y-4">
              {vulnerabilities.map((vulnerability, index) => (
                <div
                  key={index}
                  className={`border rounded-xl p-6 ${getSeverityColor(vulnerability.severity)} hover:scale-[1.02] transition-all duration-300`}
                >
                  <div className="flex items-start space-x-4">
                    {getSeverityIcon(vulnerability.severity)}
                    <div className="flex-1">
                      <div className="flex items-center justify-between mb-3">
                        <h4 className="font-semibold text-lg">{vulnerability.title}</h4>
                        <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                          vulnerability.severity.toLowerCase() === 'critical' || vulnerability.severity.toLowerCase() === 'high'
                            ? 'bg-red-500/20 text-red-400 border border-red-500/30'
                            : vulnerability.severity.toLowerCase() === 'medium'
                            ? 'bg-yellow-500/20 text-yellow-400 border border-yellow-500/30'
                            : 'bg-blue-500/20 text-blue-400 border border-blue-500/30'
                        }`}>
                          {vulnerability.severity.toUpperCase()}
                        </span>
                      </div>
                      <p className="text-gray-300 mb-3">{vulnerability.description}</p>
                      {vulnerability.line && (
                        <p className="text-sm text-gray-400 mb-3">
                          Line: {vulnerability.line}
                        </p>
                      )}
                      {vulnerability.recommendation && (
                        <div className="bg-gray-800/50 rounded-lg p-4 border border-gray-600/50">
                          <p className="text-sm font-medium mb-2 text-gray-200">Recommendation:</p>
                          <p className="text-sm text-gray-300">{vulnerability.recommendation}</p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </>
      )}

      {vulnerabilities.length === 0 && !isLoading && sourceCode.trim() && (
        <div className="card hover-card">
          <div className="flex items-center justify-center py-12">
            <div className="text-center">
              <CheckCircle size={64} className="text-green-400 mx-auto mb-6" />
              <h3 className="text-2xl font-semibold text-green-400 mb-3">No Vulnerabilities Found!</h3>
              <p className="text-gray-400 text-lg">Your code appears to be secure. Great job!</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityChecker;
