{"ast":null,"code":"// Security Service for vulnerability scanning\n// In a real application, this would integrate with tools like SonarQube, ESLint security, etc.\n\nexport const checkVulnerabilities = async (sourceCode, scanLevel) => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 2000));\n  const vulnerabilities = [];\n  const lines = sourceCode.split('\\n');\n\n  // SQL Injection vulnerabilities\n  const sqlInjectionPatterns = [{\n    pattern: /query\\s*\\(\\s*['\"`].*\\+\\s*\\w+/,\n    severity: 'high',\n    title: 'Potential SQL Injection'\n  }, {\n    pattern: /execute\\s*\\(\\s*['\"`].*\\+\\s*\\w+/,\n    severity: 'high',\n    title: 'Potential SQL Injection'\n  }, {\n    pattern: /sql\\s*\\(\\s*['\"`].*\\+\\s*\\w+/,\n    severity: 'high',\n    title: 'Potential SQL Injection'\n  }];\n\n  // XSS vulnerabilities\n  const xssPatterns = [{\n    pattern: /innerHTML\\s*=\\s*\\w+/,\n    severity: 'high',\n    title: 'Potential XSS via innerHTML'\n  }, {\n    pattern: /document\\.write\\s*\\(\\s*\\w+/,\n    severity: 'high',\n    title: 'Potential XSS via document.write'\n  }, {\n    pattern: /eval\\s*\\(\\s*\\w+/,\n    severity: 'critical',\n    title: 'Dangerous eval() usage'\n  }];\n\n  // Command Injection vulnerabilities\n  const commandInjectionPatterns = [{\n    pattern: /exec\\s*\\(\\s*\\w+/,\n    severity: 'critical',\n    title: 'Command Injection via exec()'\n  }, {\n    pattern: /spawn\\s*\\(\\s*\\w+/,\n    severity: 'high',\n    title: 'Command Injection via spawn()'\n  }, {\n    pattern: /child_process/,\n    severity: 'medium',\n    title: 'Child process usage detected'\n  }];\n\n  // Hardcoded secrets\n  const secretPatterns = [{\n    pattern: /password\\s*=\\s*['\"`][^'\"`]+['\"`]/,\n    severity: 'high',\n    title: 'Hardcoded password detected'\n  }, {\n    pattern: /api_key\\s*=\\s*['\"`][^'\"`]+['\"`]/,\n    severity: 'high',\n    title: 'Hardcoded API key detected'\n  }, {\n    pattern: /secret\\s*=\\s*['\"`][^'\"`]+['\"`]/,\n    severity: 'high',\n    title: 'Hardcoded secret detected'\n  }, {\n    pattern: /token\\s*=\\s*['\"`][^'\"`]+['\"`]/,\n    severity: 'high',\n    title: 'Hardcoded token detected'\n  }];\n\n  // Insecure random usage\n  const insecureRandomPatterns = [{\n    pattern: /Math\\.random\\s*\\(\\s*\\)/,\n    severity: 'medium',\n    title: 'Insecure random number generation'\n  }, {\n    pattern: /Date\\.now\\s*\\(\\s*\\)/,\n    severity: 'low',\n    title: 'Time-based random generation'\n  }];\n\n  // Deprecated or dangerous functions\n  const deprecatedPatterns = [{\n    pattern: /document\\.write\\s*\\(/,\n    severity: 'medium',\n    title: 'Deprecated document.write() usage'\n  }, {\n    pattern: /innerHTML\\s*=/,\n    severity: 'medium',\n    title: 'Potential XSS via innerHTML assignment'\n  }, {\n    pattern: /outerHTML\\s*=/,\n    severity: 'medium',\n    title: 'Potential XSS via outerHTML assignment'\n  }];\n\n  // Input validation issues\n  const inputValidationPatterns = [{\n    pattern: /req\\.body\\s*\\[/,\n    severity: 'medium',\n    title: 'Unvalidated input access'\n  }, {\n    pattern: /req\\.query\\s*\\[/,\n    severity: 'medium',\n    title: 'Unvalidated query parameter access'\n  }, {\n    pattern: /req\\.params\\s*\\[/,\n    severity: 'medium',\n    title: 'Unvalidated parameter access'\n  }];\n\n  // File system vulnerabilities\n  const fileSystemPatterns = [{\n    pattern: /fs\\.readFileSync\\s*\\(\\s*\\w+/,\n    severity: 'medium',\n    title: 'Synchronous file read detected'\n  }, {\n    pattern: /fs\\.writeFileSync\\s*\\(\\s*\\w+/,\n    severity: 'medium',\n    title: 'Synchronous file write detected'\n  }, {\n    pattern: /path\\.join\\s*\\(\\s*\\w+/,\n    severity: 'low',\n    title: 'Path manipulation potential'\n  }];\n\n  // All patterns to check\n  const allPatterns = [...sqlInjectionPatterns, ...xssPatterns, ...commandInjectionPatterns, ...secretPatterns, ...insecureRandomPatterns, ...deprecatedPatterns, ...inputValidationPatterns, ...fileSystemPatterns];\n\n  // Scan each line for vulnerabilities\n  lines.forEach((line, lineNumber) => {\n    allPatterns.forEach(pattern => {\n      if (pattern.pattern.test(line)) {\n        vulnerabilities.push({\n          title: pattern.title,\n          severity: pattern.severity,\n          description: getVulnerabilityDescription(pattern.title),\n          line: lineNumber + 1,\n          code: line.trim(),\n          recommendation: getVulnerabilityRecommendation(pattern.title)\n        });\n      }\n    });\n  });\n\n  // Additional checks for the sample code\n  if (sourceCode.includes('calculateSum') && !sourceCode.includes('typeof')) {\n    vulnerabilities.push({\n      title: 'Missing Input Validation',\n      severity: 'medium',\n      description: 'The calculateSum function lacks proper input validation for type checking.',\n      line: 2,\n      code: 'function calculateSum(a, b) {',\n      recommendation: 'Add type checking using typeof operator or use TypeScript for better type safety.'\n    });\n  }\n\n  // Check for proper error handling\n  if (sourceCode.includes('throw new Error') && !sourceCode.includes('try')) {\n    vulnerabilities.push({\n      title: 'Unhandled Exceptions',\n      severity: 'low',\n      description: 'Functions throw errors but there is no try-catch block to handle them.',\n      line: 1,\n      code: '// Error handling missing',\n      recommendation: 'Implement proper error handling with try-catch blocks or error boundaries.'\n    });\n  }\n\n  // Check for potential memory leaks\n  if (sourceCode.includes('addEventListener') && !sourceCode.includes('removeEventListener')) {\n    vulnerabilities.push({\n      title: 'Potential Memory Leak',\n      severity: 'medium',\n      description: 'Event listeners are added but not removed, which can cause memory leaks.',\n      line: 1,\n      code: '// Missing removeEventListener',\n      recommendation: 'Always remove event listeners when components unmount or elements are destroyed.'\n    });\n  }\n\n  // Filter based on scan level\n  let filteredVulnerabilities = vulnerabilities;\n  if (scanLevel === 'basic') {\n    filteredVulnerabilities = vulnerabilities.filter(v => ['critical', 'high'].includes(v.severity));\n  } else if (scanLevel === 'standard') {\n    filteredVulnerabilities = vulnerabilities.filter(v => ['critical', 'high', 'medium'].includes(v.severity));\n  }\n  return filteredVulnerabilities;\n};\nconst getVulnerabilityDescription = title => {\n  const descriptions = {\n    'Potential SQL Injection': 'User input is directly concatenated into SQL queries without proper sanitization, which could allow attackers to execute malicious SQL commands.',\n    'Potential XSS via innerHTML': 'User input is assigned to innerHTML without sanitization, which could allow attackers to inject malicious scripts.',\n    'Dangerous eval() usage': 'The eval() function executes arbitrary JavaScript code, which is a major security risk when used with user input.',\n    'Command Injection via exec()': 'User input is passed to exec() without validation, which could allow attackers to execute system commands.',\n    'Hardcoded password detected': 'Sensitive credentials are hardcoded in the source code, which is a security risk if the code is shared or compromised.',\n    'Insecure random number generation': 'Math.random() is not cryptographically secure and should not be used for security-sensitive operations.',\n    'Deprecated document.write() usage': 'document.write() is deprecated and can cause security issues when used with untrusted content.',\n    'Unvalidated input access': 'User input is accessed without proper validation or sanitization.',\n    'Synchronous file read detected': 'Synchronous file operations can block the event loop and cause performance issues.',\n    'Missing Input Validation': 'Function parameters are not validated for type, format, or range.',\n    'Unhandled Exceptions': 'Exceptions are thrown but not properly handled, which could cause application crashes.',\n    'Potential Memory Leak': 'Resources are allocated but not properly cleaned up, which can lead to memory leaks over time.'\n  };\n  return descriptions[title] || 'Security vulnerability detected in the code.';\n};\nconst getVulnerabilityRecommendation = title => {\n  const recommendations = {\n    'Potential SQL Injection': 'Use parameterized queries or prepared statements instead of string concatenation.',\n    'Potential XSS via innerHTML': 'Use textContent instead of innerHTML, or sanitize input using a library like DOMPurify.',\n    'Dangerous eval() usage': 'Avoid using eval() with user input. Use JSON.parse() for JSON data or other safer alternatives.',\n    'Command Injection via exec()': 'Validate and sanitize all user input before passing to exec() or use safer alternatives.',\n    'Hardcoded password detected': 'Use environment variables or secure configuration management for sensitive data.',\n    'Insecure random number generation': 'Use crypto.getRandomValues() or a cryptographically secure random number generator.',\n    'Deprecated document.write() usage': 'Use DOM manipulation methods like appendChild() or innerHTML with proper sanitization.',\n    'Unvalidated input access': 'Implement input validation and sanitization for all user inputs.',\n    'Synchronous file read detected': 'Use asynchronous file operations (fs.readFile) to avoid blocking the event loop.',\n    'Missing Input Validation': 'Add proper input validation using libraries like Joi, Yup, or custom validation functions.',\n    'Unhandled Exceptions': 'Implement try-catch blocks or error boundaries to handle exceptions gracefully.',\n    'Potential Memory Leak': 'Ensure proper cleanup of event listeners, timers, and other resources.'\n  };\n  return recommendations[title] || 'Review the code and implement appropriate security measures.';\n};","map":{"version":3,"names":["checkVulnerabilities","sourceCode","scanLevel","Promise","resolve","setTimeout","Math","random","vulnerabilities","lines","split","sqlInjectionPatterns","pattern","severity","title","xssPatterns","commandInjectionPatterns","secretPatterns","insecureRandomPatterns","deprecatedPatterns","inputValidationPatterns","fileSystemPatterns","allPatterns","forEach","line","lineNumber","test","push","description","getVulnerabilityDescription","code","trim","recommendation","getVulnerabilityRecommendation","includes","filteredVulnerabilities","filter","v","descriptions","recommendations"],"sources":["C:/Users/USER/OneDrive/Documents/kuding/Unit Testing Generator/src/services/securityService.js"],"sourcesContent":["// Security Service for vulnerability scanning\r\n// In a real application, this would integrate with tools like SonarQube, ESLint security, etc.\r\n\r\nexport const checkVulnerabilities = async (sourceCode, scanLevel) => {\r\n  // Simulate API delay\r\n  await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 2000));\r\n\r\n  const vulnerabilities = [];\r\n  const lines = sourceCode.split('\\n');\r\n\r\n  // SQL Injection vulnerabilities\r\n  const sqlInjectionPatterns = [\r\n    { pattern: /query\\s*\\(\\s*['\"`].*\\+\\s*\\w+/, severity: 'high', title: 'Potential SQL Injection' },\r\n    { pattern: /execute\\s*\\(\\s*['\"`].*\\+\\s*\\w+/, severity: 'high', title: 'Potential SQL Injection' },\r\n    { pattern: /sql\\s*\\(\\s*['\"`].*\\+\\s*\\w+/, severity: 'high', title: 'Potential SQL Injection' }\r\n  ];\r\n\r\n  // XSS vulnerabilities\r\n  const xssPatterns = [\r\n    { pattern: /innerHTML\\s*=\\s*\\w+/, severity: 'high', title: 'Potential XSS via innerHTML' },\r\n    { pattern: /document\\.write\\s*\\(\\s*\\w+/, severity: 'high', title: 'Potential XSS via document.write' },\r\n    { pattern: /eval\\s*\\(\\s*\\w+/, severity: 'critical', title: 'Dangerous eval() usage' }\r\n  ];\r\n\r\n  // Command Injection vulnerabilities\r\n  const commandInjectionPatterns = [\r\n    { pattern: /exec\\s*\\(\\s*\\w+/, severity: 'critical', title: 'Command Injection via exec()' },\r\n    { pattern: /spawn\\s*\\(\\s*\\w+/, severity: 'high', title: 'Command Injection via spawn()' },\r\n    { pattern: /child_process/, severity: 'medium', title: 'Child process usage detected' }\r\n  ];\r\n\r\n  // Hardcoded secrets\r\n  const secretPatterns = [\r\n    { pattern: /password\\s*=\\s*['\"`][^'\"`]+['\"`]/, severity: 'high', title: 'Hardcoded password detected' },\r\n    { pattern: /api_key\\s*=\\s*['\"`][^'\"`]+['\"`]/, severity: 'high', title: 'Hardcoded API key detected' },\r\n    { pattern: /secret\\s*=\\s*['\"`][^'\"`]+['\"`]/, severity: 'high', title: 'Hardcoded secret detected' },\r\n    { pattern: /token\\s*=\\s*['\"`][^'\"`]+['\"`]/, severity: 'high', title: 'Hardcoded token detected' }\r\n  ];\r\n\r\n  // Insecure random usage\r\n  const insecureRandomPatterns = [\r\n    { pattern: /Math\\.random\\s*\\(\\s*\\)/, severity: 'medium', title: 'Insecure random number generation' },\r\n    { pattern: /Date\\.now\\s*\\(\\s*\\)/, severity: 'low', title: 'Time-based random generation' }\r\n  ];\r\n\r\n  // Deprecated or dangerous functions\r\n  const deprecatedPatterns = [\r\n    { pattern: /document\\.write\\s*\\(/, severity: 'medium', title: 'Deprecated document.write() usage' },\r\n    { pattern: /innerHTML\\s*=/, severity: 'medium', title: 'Potential XSS via innerHTML assignment' },\r\n    { pattern: /outerHTML\\s*=/, severity: 'medium', title: 'Potential XSS via outerHTML assignment' }\r\n  ];\r\n\r\n  // Input validation issues\r\n  const inputValidationPatterns = [\r\n    { pattern: /req\\.body\\s*\\[/, severity: 'medium', title: 'Unvalidated input access' },\r\n    { pattern: /req\\.query\\s*\\[/, severity: 'medium', title: 'Unvalidated query parameter access' },\r\n    { pattern: /req\\.params\\s*\\[/, severity: 'medium', title: 'Unvalidated parameter access' }\r\n  ];\r\n\r\n  // File system vulnerabilities\r\n  const fileSystemPatterns = [\r\n    { pattern: /fs\\.readFileSync\\s*\\(\\s*\\w+/, severity: 'medium', title: 'Synchronous file read detected' },\r\n    { pattern: /fs\\.writeFileSync\\s*\\(\\s*\\w+/, severity: 'medium', title: 'Synchronous file write detected' },\r\n    { pattern: /path\\.join\\s*\\(\\s*\\w+/, severity: 'low', title: 'Path manipulation potential' }\r\n  ];\r\n\r\n  // All patterns to check\r\n  const allPatterns = [\r\n    ...sqlInjectionPatterns,\r\n    ...xssPatterns,\r\n    ...commandInjectionPatterns,\r\n    ...secretPatterns,\r\n    ...insecureRandomPatterns,\r\n    ...deprecatedPatterns,\r\n    ...inputValidationPatterns,\r\n    ...fileSystemPatterns\r\n  ];\r\n\r\n  // Scan each line for vulnerabilities\r\n  lines.forEach((line, lineNumber) => {\r\n    allPatterns.forEach(pattern => {\r\n      if (pattern.pattern.test(line)) {\r\n        vulnerabilities.push({\r\n          title: pattern.title,\r\n          severity: pattern.severity,\r\n          description: getVulnerabilityDescription(pattern.title),\r\n          line: lineNumber + 1,\r\n          code: line.trim(),\r\n          recommendation: getVulnerabilityRecommendation(pattern.title)\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  // Additional checks for the sample code\r\n  if (sourceCode.includes('calculateSum') && !sourceCode.includes('typeof')) {\r\n    vulnerabilities.push({\r\n      title: 'Missing Input Validation',\r\n      severity: 'medium',\r\n      description: 'The calculateSum function lacks proper input validation for type checking.',\r\n      line: 2,\r\n      code: 'function calculateSum(a, b) {',\r\n      recommendation: 'Add type checking using typeof operator or use TypeScript for better type safety.'\r\n    });\r\n  }\r\n\r\n  // Check for proper error handling\r\n  if (sourceCode.includes('throw new Error') && !sourceCode.includes('try')) {\r\n    vulnerabilities.push({\r\n      title: 'Unhandled Exceptions',\r\n      severity: 'low',\r\n      description: 'Functions throw errors but there is no try-catch block to handle them.',\r\n      line: 1,\r\n      code: '// Error handling missing',\r\n      recommendation: 'Implement proper error handling with try-catch blocks or error boundaries.'\r\n    });\r\n  }\r\n\r\n  // Check for potential memory leaks\r\n  if (sourceCode.includes('addEventListener') && !sourceCode.includes('removeEventListener')) {\r\n    vulnerabilities.push({\r\n      title: 'Potential Memory Leak',\r\n      severity: 'medium',\r\n      description: 'Event listeners are added but not removed, which can cause memory leaks.',\r\n      line: 1,\r\n      code: '// Missing removeEventListener',\r\n      recommendation: 'Always remove event listeners when components unmount or elements are destroyed.'\r\n    });\r\n  }\r\n\r\n  // Filter based on scan level\r\n  let filteredVulnerabilities = vulnerabilities;\r\n  if (scanLevel === 'basic') {\r\n    filteredVulnerabilities = vulnerabilities.filter(v => ['critical', 'high'].includes(v.severity));\r\n  } else if (scanLevel === 'standard') {\r\n    filteredVulnerabilities = vulnerabilities.filter(v => ['critical', 'high', 'medium'].includes(v.severity));\r\n  }\r\n\r\n  return filteredVulnerabilities;\r\n};\r\n\r\nconst getVulnerabilityDescription = (title) => {\r\n  const descriptions = {\r\n    'Potential SQL Injection': 'User input is directly concatenated into SQL queries without proper sanitization, which could allow attackers to execute malicious SQL commands.',\r\n    'Potential XSS via innerHTML': 'User input is assigned to innerHTML without sanitization, which could allow attackers to inject malicious scripts.',\r\n    'Dangerous eval() usage': 'The eval() function executes arbitrary JavaScript code, which is a major security risk when used with user input.',\r\n    'Command Injection via exec()': 'User input is passed to exec() without validation, which could allow attackers to execute system commands.',\r\n    'Hardcoded password detected': 'Sensitive credentials are hardcoded in the source code, which is a security risk if the code is shared or compromised.',\r\n    'Insecure random number generation': 'Math.random() is not cryptographically secure and should not be used for security-sensitive operations.',\r\n    'Deprecated document.write() usage': 'document.write() is deprecated and can cause security issues when used with untrusted content.',\r\n    'Unvalidated input access': 'User input is accessed without proper validation or sanitization.',\r\n    'Synchronous file read detected': 'Synchronous file operations can block the event loop and cause performance issues.',\r\n    'Missing Input Validation': 'Function parameters are not validated for type, format, or range.',\r\n    'Unhandled Exceptions': 'Exceptions are thrown but not properly handled, which could cause application crashes.',\r\n    'Potential Memory Leak': 'Resources are allocated but not properly cleaned up, which can lead to memory leaks over time.'\r\n  };\r\n\r\n  return descriptions[title] || 'Security vulnerability detected in the code.';\r\n};\r\n\r\nconst getVulnerabilityRecommendation = (title) => {\r\n  const recommendations = {\r\n    'Potential SQL Injection': 'Use parameterized queries or prepared statements instead of string concatenation.',\r\n    'Potential XSS via innerHTML': 'Use textContent instead of innerHTML, or sanitize input using a library like DOMPurify.',\r\n    'Dangerous eval() usage': 'Avoid using eval() with user input. Use JSON.parse() for JSON data or other safer alternatives.',\r\n    'Command Injection via exec()': 'Validate and sanitize all user input before passing to exec() or use safer alternatives.',\r\n    'Hardcoded password detected': 'Use environment variables or secure configuration management for sensitive data.',\r\n    'Insecure random number generation': 'Use crypto.getRandomValues() or a cryptographically secure random number generator.',\r\n    'Deprecated document.write() usage': 'Use DOM manipulation methods like appendChild() or innerHTML with proper sanitization.',\r\n    'Unvalidated input access': 'Implement input validation and sanitization for all user inputs.',\r\n    'Synchronous file read detected': 'Use asynchronous file operations (fs.readFile) to avoid blocking the event loop.',\r\n    'Missing Input Validation': 'Add proper input validation using libraries like Joi, Yup, or custom validation functions.',\r\n    'Unhandled Exceptions': 'Implement try-catch blocks or error boundaries to handle exceptions gracefully.',\r\n    'Potential Memory Leak': 'Ensure proper cleanup of event listeners, timers, and other resources.'\r\n  };\r\n\r\n  return recommendations[title] || 'Review the code and implement appropriate security measures.';\r\n};\r\n"],"mappings":"AAAA;AACA;;AAEA,OAAO,MAAMA,oBAAoB,GAAG,MAAAA,CAAOC,UAAU,EAAEC,SAAS,KAAK;EACnE;EACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,GAAGE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;EAE9E,MAAMC,eAAe,GAAG,EAAE;EAC1B,MAAMC,KAAK,GAAGR,UAAU,CAACS,KAAK,CAAC,IAAI,CAAC;;EAEpC;EACA,MAAMC,oBAAoB,GAAG,CAC3B;IAAEC,OAAO,EAAE,8BAA8B;IAAEC,QAAQ,EAAE,MAAM;IAAEC,KAAK,EAAE;EAA0B,CAAC,EAC/F;IAAEF,OAAO,EAAE,gCAAgC;IAAEC,QAAQ,EAAE,MAAM;IAAEC,KAAK,EAAE;EAA0B,CAAC,EACjG;IAAEF,OAAO,EAAE,4BAA4B;IAAEC,QAAQ,EAAE,MAAM;IAAEC,KAAK,EAAE;EAA0B,CAAC,CAC9F;;EAED;EACA,MAAMC,WAAW,GAAG,CAClB;IAAEH,OAAO,EAAE,qBAAqB;IAAEC,QAAQ,EAAE,MAAM;IAAEC,KAAK,EAAE;EAA8B,CAAC,EAC1F;IAAEF,OAAO,EAAE,4BAA4B;IAAEC,QAAQ,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAmC,CAAC,EACtG;IAAEF,OAAO,EAAE,iBAAiB;IAAEC,QAAQ,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAyB,CAAC,CACtF;;EAED;EACA,MAAME,wBAAwB,GAAG,CAC/B;IAAEJ,OAAO,EAAE,iBAAiB;IAAEC,QAAQ,EAAE,UAAU;IAAEC,KAAK,EAAE;EAA+B,CAAC,EAC3F;IAAEF,OAAO,EAAE,kBAAkB;IAAEC,QAAQ,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAgC,CAAC,EACzF;IAAEF,OAAO,EAAE,eAAe;IAAEC,QAAQ,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAA+B,CAAC,CACxF;;EAED;EACA,MAAMG,cAAc,GAAG,CACrB;IAAEL,OAAO,EAAE,kCAAkC;IAAEC,QAAQ,EAAE,MAAM;IAAEC,KAAK,EAAE;EAA8B,CAAC,EACvG;IAAEF,OAAO,EAAE,iCAAiC;IAAEC,QAAQ,EAAE,MAAM;IAAEC,KAAK,EAAE;EAA6B,CAAC,EACrG;IAAEF,OAAO,EAAE,gCAAgC;IAAEC,QAAQ,EAAE,MAAM;IAAEC,KAAK,EAAE;EAA4B,CAAC,EACnG;IAAEF,OAAO,EAAE,+BAA+B;IAAEC,QAAQ,EAAE,MAAM;IAAEC,KAAK,EAAE;EAA2B,CAAC,CAClG;;EAED;EACA,MAAMI,sBAAsB,GAAG,CAC7B;IAAEN,OAAO,EAAE,wBAAwB;IAAEC,QAAQ,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAoC,CAAC,EACrG;IAAEF,OAAO,EAAE,qBAAqB;IAAEC,QAAQ,EAAE,KAAK;IAAEC,KAAK,EAAE;EAA+B,CAAC,CAC3F;;EAED;EACA,MAAMK,kBAAkB,GAAG,CACzB;IAAEP,OAAO,EAAE,sBAAsB;IAAEC,QAAQ,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAoC,CAAC,EACnG;IAAEF,OAAO,EAAE,eAAe;IAAEC,QAAQ,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAyC,CAAC,EACjG;IAAEF,OAAO,EAAE,eAAe;IAAEC,QAAQ,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAyC,CAAC,CAClG;;EAED;EACA,MAAMM,uBAAuB,GAAG,CAC9B;IAAER,OAAO,EAAE,gBAAgB;IAAEC,QAAQ,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAA2B,CAAC,EACpF;IAAEF,OAAO,EAAE,iBAAiB;IAAEC,QAAQ,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAqC,CAAC,EAC/F;IAAEF,OAAO,EAAE,kBAAkB;IAAEC,QAAQ,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAA+B,CAAC,CAC3F;;EAED;EACA,MAAMO,kBAAkB,GAAG,CACzB;IAAET,OAAO,EAAE,6BAA6B;IAAEC,QAAQ,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAiC,CAAC,EACvG;IAAEF,OAAO,EAAE,8BAA8B;IAAEC,QAAQ,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAkC,CAAC,EACzG;IAAEF,OAAO,EAAE,uBAAuB;IAAEC,QAAQ,EAAE,KAAK;IAAEC,KAAK,EAAE;EAA8B,CAAC,CAC5F;;EAED;EACA,MAAMQ,WAAW,GAAG,CAClB,GAAGX,oBAAoB,EACvB,GAAGI,WAAW,EACd,GAAGC,wBAAwB,EAC3B,GAAGC,cAAc,EACjB,GAAGC,sBAAsB,EACzB,GAAGC,kBAAkB,EACrB,GAAGC,uBAAuB,EAC1B,GAAGC,kBAAkB,CACtB;;EAED;EACAZ,KAAK,CAACc,OAAO,CAAC,CAACC,IAAI,EAAEC,UAAU,KAAK;IAClCH,WAAW,CAACC,OAAO,CAACX,OAAO,IAAI;MAC7B,IAAIA,OAAO,CAACA,OAAO,CAACc,IAAI,CAACF,IAAI,CAAC,EAAE;QAC9BhB,eAAe,CAACmB,IAAI,CAAC;UACnBb,KAAK,EAAEF,OAAO,CAACE,KAAK;UACpBD,QAAQ,EAAED,OAAO,CAACC,QAAQ;UAC1Be,WAAW,EAAEC,2BAA2B,CAACjB,OAAO,CAACE,KAAK,CAAC;UACvDU,IAAI,EAAEC,UAAU,GAAG,CAAC;UACpBK,IAAI,EAAEN,IAAI,CAACO,IAAI,CAAC,CAAC;UACjBC,cAAc,EAAEC,8BAA8B,CAACrB,OAAO,CAACE,KAAK;QAC9D,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACA,IAAIb,UAAU,CAACiC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAACjC,UAAU,CAACiC,QAAQ,CAAC,QAAQ,CAAC,EAAE;IACzE1B,eAAe,CAACmB,IAAI,CAAC;MACnBb,KAAK,EAAE,0BAA0B;MACjCD,QAAQ,EAAE,QAAQ;MAClBe,WAAW,EAAE,4EAA4E;MACzFJ,IAAI,EAAE,CAAC;MACPM,IAAI,EAAE,+BAA+B;MACrCE,cAAc,EAAE;IAClB,CAAC,CAAC;EACJ;;EAEA;EACA,IAAI/B,UAAU,CAACiC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAACjC,UAAU,CAACiC,QAAQ,CAAC,KAAK,CAAC,EAAE;IACzE1B,eAAe,CAACmB,IAAI,CAAC;MACnBb,KAAK,EAAE,sBAAsB;MAC7BD,QAAQ,EAAE,KAAK;MACfe,WAAW,EAAE,wEAAwE;MACrFJ,IAAI,EAAE,CAAC;MACPM,IAAI,EAAE,2BAA2B;MACjCE,cAAc,EAAE;IAClB,CAAC,CAAC;EACJ;;EAEA;EACA,IAAI/B,UAAU,CAACiC,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAACjC,UAAU,CAACiC,QAAQ,CAAC,qBAAqB,CAAC,EAAE;IAC1F1B,eAAe,CAACmB,IAAI,CAAC;MACnBb,KAAK,EAAE,uBAAuB;MAC9BD,QAAQ,EAAE,QAAQ;MAClBe,WAAW,EAAE,0EAA0E;MACvFJ,IAAI,EAAE,CAAC;MACPM,IAAI,EAAE,gCAAgC;MACtCE,cAAc,EAAE;IAClB,CAAC,CAAC;EACJ;;EAEA;EACA,IAAIG,uBAAuB,GAAG3B,eAAe;EAC7C,IAAIN,SAAS,KAAK,OAAO,EAAE;IACzBiC,uBAAuB,GAAG3B,eAAe,CAAC4B,MAAM,CAACC,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,CAACH,QAAQ,CAACG,CAAC,CAACxB,QAAQ,CAAC,CAAC;EAClG,CAAC,MAAM,IAAIX,SAAS,KAAK,UAAU,EAAE;IACnCiC,uBAAuB,GAAG3B,eAAe,CAAC4B,MAAM,CAACC,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,EAAE,QAAQ,CAAC,CAACH,QAAQ,CAACG,CAAC,CAACxB,QAAQ,CAAC,CAAC;EAC5G;EAEA,OAAOsB,uBAAuB;AAChC,CAAC;AAED,MAAMN,2BAA2B,GAAIf,KAAK,IAAK;EAC7C,MAAMwB,YAAY,GAAG;IACnB,yBAAyB,EAAE,kJAAkJ;IAC7K,6BAA6B,EAAE,oHAAoH;IACnJ,wBAAwB,EAAE,mHAAmH;IAC7I,8BAA8B,EAAE,4GAA4G;IAC5I,6BAA6B,EAAE,wHAAwH;IACvJ,mCAAmC,EAAE,yGAAyG;IAC9I,mCAAmC,EAAE,gGAAgG;IACrI,0BAA0B,EAAE,mEAAmE;IAC/F,gCAAgC,EAAE,oFAAoF;IACtH,0BAA0B,EAAE,mEAAmE;IAC/F,sBAAsB,EAAE,wFAAwF;IAChH,uBAAuB,EAAE;EAC3B,CAAC;EAED,OAAOA,YAAY,CAACxB,KAAK,CAAC,IAAI,8CAA8C;AAC9E,CAAC;AAED,MAAMmB,8BAA8B,GAAInB,KAAK,IAAK;EAChD,MAAMyB,eAAe,GAAG;IACtB,yBAAyB,EAAE,mFAAmF;IAC9G,6BAA6B,EAAE,yFAAyF;IACxH,wBAAwB,EAAE,iGAAiG;IAC3H,8BAA8B,EAAE,0FAA0F;IAC1H,6BAA6B,EAAE,kFAAkF;IACjH,mCAAmC,EAAE,qFAAqF;IAC1H,mCAAmC,EAAE,wFAAwF;IAC7H,0BAA0B,EAAE,kEAAkE;IAC9F,gCAAgC,EAAE,kFAAkF;IACpH,0BAA0B,EAAE,4FAA4F;IACxH,sBAAsB,EAAE,iFAAiF;IACzG,uBAAuB,EAAE;EAC3B,CAAC;EAED,OAAOA,eAAe,CAACzB,KAAK,CAAC,IAAI,8DAA8D;AACjG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}